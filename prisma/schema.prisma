generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tenant Model - Main tenant information with enhanced fields
model Tenant {
  id            String   @id @default(cuid())
  name          String   @unique
  shopDomain    String   @unique
  accessToken   String?
  apiVersion    String   @default("2023-07")
  isActive      Boolean  @default(true)
  settings      Json?    // Store tenant-specific settings
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  users         User[]
  customers     Customer[]
  products      Product[]
  orders        Order[]
  customEvents  CustomEvent[]
  
  // Indexes for performance
  @@index([isActive])
  @@index([shopDomain])
  @@map("tenants")
}


// Customer Model - Synced from Shopify with enhanced tracking
model Customer {
  id                String   @id @default(cuid())
  tenantId          String
  shopifyCustomerId String
  email             String?
  firstName         String?
  lastName          String?
  phone             String?
  totalSpent        Decimal  @default(0) @db.Decimal(12,2)
  ordersCount       Int      @default(0)
  tags              String[] // Shopify customer tags
  acceptsMarketing  Boolean  @default(false)
  state             String?  // enabled, disabled, invited, declined
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orders            Order[]
  
  // Composite indexes for performance
  @@unique([tenantId, shopifyCustomerId])
  @@index([tenantId, email])
  @@index([tenantId, totalSpent])
  @@index([tenantId, createdAt])
  @@map("customers")
}

// Product Model - Synced from Shopify with inventory tracking
model Product {
  id               String   @id @default(cuid())
  tenantId         String
  shopifyProductId String
  title            String
  handle           String?
  description      String?
  vendor           String?
  productType      String?
  price            Decimal  @default(0) @db.Decimal(10,2)
  compareAtPrice   Decimal? @db.Decimal(10,2)
  inventory        Int      @default(0)
  status           ProductStatus @default(ACTIVE)
  images           Json?    // Store product images
  tags             String[] // Product tags
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  tenant           Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orderItems       OrderItem[]
  
  // Indexes
  @@unique([tenantId, shopifyProductId])
  @@index([tenantId, status])
  @@index([tenantId, vendor])
  @@index([tenantId, productType])
  @@map("products")
}

// Order Model - Synced from Shopify with enhanced tracking
model Order {
  id               String      @id @default(cuid())
  tenantId         String
  shopifyOrderId   String
  customerId       String?
  orderNumber      String
  totalPrice       Decimal     @default(0) @db.Decimal(12,2)
  subtotalPrice    Decimal     @default(0) @db.Decimal(12,2)
  taxAmount        Decimal     @default(0) @db.Decimal(10,2)
  shippingAmount   Decimal     @default(0) @db.Decimal(10,2)
  discountAmount   Decimal     @default(0) @db.Decimal(10,2)
  currency         String      @default("USD")
  financialStatus  String      // paid, pending, refunded, etc.
  fulfillmentStatus String?    // shipped, delivered, etc.
  orderStatus      OrderStatus @default(OPEN)
  processedAt      DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  
  // Relations
  tenant           Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer         Customer?   @relation(fields: [customerId], references: [id])
  orderItems       OrderItem[]
  
  // Indexes for analytics queries
  @@unique([tenantId, shopifyOrderId])
  @@index([tenantId, createdAt])
  @@index([tenantId, customerId])
  @@index([tenantId, totalPrice])
  @@index([tenantId, financialStatus])
  @@map("orders")
}

// OrderItem Model - Individual items in orders
model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String?
  title     String
  quantity  Int
  price     Decimal @db.Decimal(10,2)
  totalPrice Decimal @db.Decimal(10,2)
  sku       String?
  
  // Relations
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id])
  
  // Indexes
  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

// CustomEvent Model - For tracking user behavior and analytics
model CustomEvent {
  id        String   @id @default(cuid())
  tenantId  String
  eventType String
  eventData Json?
  userId    String?
  sessionId String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  // Relations
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Indexes for analytics
  @@index([tenantId, eventType])
  @@index([tenantId, createdAt])
  @@index([tenantId, userId])
  @@index([sessionId])
  @@map("custom_events")
}

// Cache Model - For storing cached API responses
model CacheEntry {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  // Indexes
  @@index([key])
  @@index([expiresAt])
  @@map("cache_entries")
}

// JobQueue Model - For async processing with Redis backup
model JobQueue {
  id          String    @id @default(cuid())
  tenantId    String?
  jobType     String
  payload     Json
  status      JobStatus @default(PENDING)
  attempts    Int       @default(0)
  maxAttempts Int       @default(3)
  error       String?
  processedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Indexes
  @@index([status, createdAt])
  @@index([tenantId, jobType])
  @@map("job_queue")
}

// Enums for type safety
enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  VIEWER
}

enum ProductStatus {
  ACTIVE
  DRAFT
  ARCHIVED
}

enum OrderStatus {
  OPEN
  CLOSED
  CANCELLED
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  RETRYING
}

// Add this to your schema.prisma file

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   
  firstName String?
  lastName  String?
  tenantId  String
  role      UserRole @default(ADMIN)
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@map("users")
}

